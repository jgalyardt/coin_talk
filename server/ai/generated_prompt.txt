I am creating an Elixir Phoenix back-end for a Vue 3 front-end called coin_talk.
The concept is two charts on the left: Bitcoin and $USD.
To the right is a chat box. There are two chat bots, Al1c3 and B0b, which use Gemini's free tier to discuss what's going on in the markets.
Users can chat too, and the bots will react based on the conversation.

Modify my project's code to do the following:
- Ensure that bots continue to reply to each other in active mode.
- Ensure that bots never update an already sent message to "typing..."
- Add many more different prompts, and make them notably different.
- Add a route to clear the chat and restart the conversation with new bots

=== File: lib/coin_talk/application.ex ===

defmodule CoinTalk.Application do
  # See https://hexdocs.pm/elixir/Application.html
  # for more information on OTP Applications
  @moduledoc false

  use Application

  @impl true
  def start(_type, _args) do
    children = [
      CoinTalkWeb.Telemetry,
      CoinTalk.Repo,
      {DNSCluster, query: Application.get_env(:coin_talk, :dns_cluster_query) || :ignore},
      {Phoenix.PubSub, name: CoinTalk.PubSub},
      # Start the Finch HTTP client for sending emails
      {Finch, name: CoinTalk.Finch},
      # Start the tracker for the last user message timestamp
      CoinTalk.Chat.UserMessageTracker,
      # Start the market data monitor (polling every 2 seconds)
      CoinTalk.MarketData,
      # Start the bot responder (checks every 5 seconds)
      CoinTalk.BotResponder,
      # Start to serve requests, typically the last entry
      CoinTalkWeb.Endpoint
    ]

    # See https://hexdocs.pm/elixir/Supervisor.html
    # for other strategies and supported options
    opts = [strategy: :one_for_one, name: CoinTalk.Supervisor]
    Supervisor.start_link(children, opts)
  end

  # Tell Phoenix to update the endpoint configuration
  # whenever the application is updated.
  @impl true
  def config_change(changed, _new, removed) do
    CoinTalkWeb.Endpoint.config_change(changed, removed)
    :ok
  end
end

=== File: lib/coin_talk/bot_responder.ex ===

defmodule CoinTalk.BotResponder do
  @moduledoc """
  Triggers chatbot responses with dynamic behavior:

  - **Passive mode (no humans):**  
    Each bot speaks at most once per hour and bots alternate turns.

  - **Active mode (human connected but no new human message):**  
    Bots reply roughly every 20–30 seconds.

  - **Immediate human reply:**  
    When a human sends a message, all bots immediately respond.

  Bots never reply to a message that they themselves sent.
  """
  use GenServer
  require Logger

  @bots ["🤖 Al1c3", "🤖 B0b"]

  # Intervals in milliseconds
  @passive_interval 3_600_000     # 1 hour per bot in passive mode
  @active_interval 25_000         # roughly every 25 seconds in active mode
  @check_interval 5_000           # default periodic check

  # Public API

  def start_link(_args) do
    # Add last_human_message_ts to state to help deduplicate immediate responses.
    state = %{
      last_bot: nil,
      bot_timestamps: %{"Al1c3" => 0, "B0b" => 0},
      mode: :passive,
      last_human_message_ts: 0
    }
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  @impl true
  def init(state) do
    schedule_check(@check_interval)
    {:ok, state}
  end

  # Handle a cast triggered by a human message.
  @impl true
  def handle_cast({:human_message, human_msg}, state) do
    Logger.info("Received human message, triggering immediate bot responses.")
    new_state = %{state | mode: :active, last_human_message_ts: System.system_time(:millisecond)}
    Enum.each(@bots, fn bot ->
      generate_bot_response(bot, human_msg, context_minutes: 2, force: true)
    end)
    {:noreply, new_state}
  end

  # Periodic check to decide if a bot should respond.
  @impl true
  def handle_info(:check, state) do
    now = System.system_time(:millisecond)
    # If a human message was received within the last 5 seconds, skip periodic responses.
    if now - state.last_human_message_ts < 5_000 do
      Logger.debug("Recent human message detected, skipping periodic bot response")
      schedule_check(@check_interval)
      {:noreply, state}
    else
      mode = determine_mode()
      state = %{state | mode: mode}
      last_chat = CoinTalk.Chat.get_last_message()

      cond do
        last_chat && last_chat.sender in @bots ->
          Logger.debug("Last message by #{last_chat.sender}; waiting for a new speaker.")
          :noop

        mode == :active ->
          bot = choose_next_bot(state.last_bot, state.bot_timestamps, @active_interval)
          state = maybe_respond(bot, last_chat, state, context_minutes: 2)
          state

        mode == :passive ->
          bot = choose_next_bot(state.last_bot, state.bot_timestamps, @passive_interval)
          state = maybe_respond(bot, last_chat, state, context_minutes: 24)
          state
      end

      schedule_check(@check_interval)
      {:noreply, state}
    end
  end

  # Helper: schedule the next periodic check.
  defp schedule_check(interval) do
    Process.send_after(self(), :check, interval)
  end

  # Helper: choose the next bot that did not send the last message and whose cooldown has expired.
  defp choose_next_bot(last_bot, bot_timestamps, interval) do
    now = System.system_time(:millisecond)
    @bots
    |> Enum.reject(fn bot -> bot == last_bot end)
    |> Enum.find(fn bot ->
      now - Map.get(bot_timestamps, bot, 0) >= interval
    end)
  end

  # Helper: if a bot is eligible, generate a response and update state.
  defp maybe_respond(nil, _last_chat, state, _opts) do
    Logger.debug("No eligible bot found for response at this time.")
    state
  end

  defp maybe_respond(bot, last_chat, state, opts) do
    now = System.system_time(:millisecond)

    if last_chat && last_chat.sender == bot do
      Logger.debug("#{bot} was the last to speak. Skipping its response.")
      state
    else
      generate_bot_response(bot, last_chat, opts)
      new_timestamps = Map.put(state.bot_timestamps, bot, now)
      %{state | bot_timestamps: new_timestamps, last_bot: bot}
    end
  end

  # Determine the current mode.
  defp determine_mode do
    last_user_ts = CoinTalk.Chat.UserMessageTracker.get_last_message_timestamp()
    now = System.system_time(:millisecond)
    if now - last_user_ts < 60_000, do: :active, else: :passive
  end

  # Generate a bot response.
  # - `opts` expects a keyword list with:
  #   - `:context_minutes` – how many minutes of chat history to include.
  #   - `:force` – when true, ignore cooldown checks (used for immediate human replies).
  defp generate_bot_response(bot, last_chat, opts) do
    market_context = CoinTalk.MarketData.get_context()
    context_minutes = Keyword.get(opts, :context_minutes, 2)
    chat_history = CoinTalk.Chat.list_recent_chats(context_minutes)
    chat_history_str = format_chat_history(chat_history)

    anchor =
      case last_chat do
        nil ->
          "no previous message"
        %_{inserted_at: inserted_at, sender: sender, content: content} ->
          "[#{NaiveDateTime.to_string(inserted_at)}] #{sender}: #{content}"
      end

    # Use a randomized prompt to vary tone and content.
    prompt = randomized_prompt(bot, anchor, chat_history_str, context_minutes, market_context)

    # Spawn a Task so the GenServer remains responsive.
    Task.start(fn ->
      # Stagger initial response to avoid simultaneous typing.
      initial_delay = :rand.uniform(1000)
      :timer.sleep(initial_delay)
      case CoinTalk.Chat.create_message(%{sender: bot, content: "#{bot} is typing..."}) do
        {:ok, typing_message} ->
          # Simulate typing delay.
          delay = :rand.uniform(2000) + 1000
          :timer.sleep(delay)
          case CoinTalk.GeminiClient.generate_content(prompt) do
            {:ok, response} ->
              case CoinTalk.Chat.update_message(typing_message, %{content: response}) do
                {:ok, message} ->
                  Logger.info("[#{NaiveDateTime.to_string(message.inserted_at)}] #{bot}: #{response}")
                {:error, error} ->
                  Logger.error("Failed to update bot message: #{inspect(error)}")
              end
            {:error, reason} ->
              Logger.error("Gemini error: #{reason}")
              _ = CoinTalk.Chat.update_message(typing_message, %{content: "error: #{reason}"})
          end
        {:error, error} ->
          Logger.error("Failed to create typing message for #{bot}: #{inspect(error)}")
      end
    end)
  end

  # Returns a randomized prompt to vary tone and content.
  defp randomized_prompt(_bot, anchor, chat_history_str, context_minutes, market_context) do
    prompts = [
      "you are a chatbot in an internet chat room. be friendly and humorous while commenting on market trends. address the most recent message: \"#{anchor}\". chat history (last #{context_minutes} minutes):\n#{chat_history_str}\nmarket context:\n#{market_context}\nresponses must be one sentence max all lowercase with no punctuation",
      "you are a witty and insightful chat bot discussing bitcoin and usd. focus on the latest message: \"#{anchor}\" and the following conversation:\n#{chat_history_str}\nmarket context:\n#{market_context}\nkeep your response under two sentences all lowercase with no punctuation",
      "you are a market savvy chatbot. with a friendly tone, comment on bitcoin and usd based on the last message: \"#{anchor}\" and chat history:\n#{chat_history_str}\nmarket context:\n#{market_context}\nrespond in one sentence max all lowercase with no punctuation"
    ]
    Enum.random(prompts)
  end

  defp format_chat_history(chat_messages) do
    chat_messages
    |> Enum.map(fn msg ->
      time = NaiveDateTime.to_string(msg.inserted_at)
      "[#{time}] #{msg.sender}: #{msg.content}"
    end)
    |> Enum.join("\n")
  end
end

=== File: lib/coin_talk/chat/message.ex ===

defmodule CoinTalk.Chat.Message do
  @moduledoc """
  An Ecto schema for chat messages.
  """

  use Ecto.Schema
  import Ecto.Changeset

  @derive {Jason.Encoder, only: [:id, :sender, :content, :inserted_at, :updated_at]}
  schema "chat_messages" do
    field :sender, :string
    field :content, :string

    timestamps()
  end

  @doc false
  def changeset(message, attrs) do
    message
    |> cast(attrs, [:sender, :content])
    |> validate_required([:sender, :content])
  end
end

=== File: lib/coin_talk/chat/user_message_tracker.ex ===

defmodule CoinTalk.Chat.UserMessageTracker do
  @moduledoc """
  Keeps track of the timestamp (in milliseconds) of the last user–submitted chat message.
  """
  use Agent

  def start_link(_args) do
    # Initialize with 0 (epoch) so that if no message has been sent,
    # the idle check will trigger immediately.
    Agent.start_link(fn -> 0 end, name: __MODULE__)
  end

  @doc "Sets the timestamp (in milliseconds) for the last user message."
  def set_last_message_timestamp(timestamp) do
    Agent.update(__MODULE__, fn _old -> timestamp end)
  end

  @doc "Returns the timestamp (in milliseconds) of the last user message."
  def get_last_message_timestamp do
    Agent.get(__MODULE__, & &1)
  end
end

=== File: lib/coin_talk/chat.ex ===

defmodule CoinTalk.Chat do
  @moduledoc """
  The Chat context for storing messages and (now) triggering bot responses via a periodic process.
  """

  import Ecto.Query, warn: false
  alias CoinTalk.Repo
  alias CoinTalk.Chat.Message

  @doc """
  Lists the most recent chat messages (by default the last 50).
  """
  def list_messages(limit \\ 50) do
    Message
    |> order_by([m], desc: m.inserted_at)
    |> limit(^limit)
    |> Repo.all()
    |> Enum.reverse()
  end

  @doc """
  Returns the latest (most recent) chat message.
  """
  def get_last_message do
    list_messages(1) |> List.first()
  end

  @doc """
  Creates a new chat message.
  """
  def create_message(attrs \\ %{}) do
    %Message{}
    |> Message.changeset(attrs)
    |> Repo.insert()
  end

  @doc """
  Updates an existing chat message with the given attributes.
  """
  def update_message(%Message{} = message, attrs) do
    message
    |> Message.changeset(attrs)
    |> Repo.update()
  end

  @doc """
  Handles a user–submitted message. If the sender is not a bot,
  the last user message timestamp is updated.
  """
  def handle_user_message(attrs) do
    case create_message(attrs) do
      {:ok, message} ->
        if message.sender not in ["Al1c3", "B0b"] do
          # Update the last user message timestamp (in milliseconds)
          CoinTalk.Chat.UserMessageTracker.set_last_message_timestamp(
            System.system_time(:millisecond)
          )

          # Trigger immediate bot responses
          GenServer.cast(CoinTalk.BotResponder, {:human_message, message})
        end

        {:ok, message}

      error ->
        error
    end
  end

  @doc """
  Lists chat messages from the past `minutes` minutes.
  """
  def list_recent_chats(minutes) do
    cutoff = NaiveDateTime.add(NaiveDateTime.utc_now(), -minutes * 60, :second)
    query = from m in Message, where: m.inserted_at >= ^cutoff, order_by: [asc: m.inserted_at]
    Repo.all(query)
  end
end

=== File: lib/coin_talk/market_data.ex ===

defmodule CoinTalk.MarketData do
  @moduledoc """
  Fetches BTC market data from the CoinMarketCap API at a rate that respects
  the free plan limit (roughly one update every 4–5 minutes).

  Maintains a record of the latest current price and historical data.
  Historical data includes: price 1 day ago, 1 week ago, 1 month ago, and 1 year ago.

  If the historical endpoint is not supported, dummy fallback values are used:
    - Yesterday (2025-02-14): $97,499.63
    - 1 Week Ago (2025-02-08): $96,650.00
    - 1 Month Ago (2025-01-15): $100,700.00
    - 1 Year Ago (2024-02-15): $51,800.00
  """

  use GenServer

  @poll_interval 300_000
  defstruct current: nil, historical: nil, last_updated: nil

  # Public API

  def start_link(_args) do
    GenServer.start_link(__MODULE__, %__MODULE__{}, name: __MODULE__)
  end

  @doc "Returns the latest current BTC price data."
  def get_current_price do
    GenServer.call(__MODULE__, :get_current)
  end

  @doc "Returns the historical BTC data as a map with keys :yesterday, :week, :month, and :year."
  def get_historical_data do
    GenServer.call(__MODULE__, :get_historical)
  end

  @doc """
  Returns a formatted context string that includes the current BTC price
  and historical data. (Intended for use in bot prompts.)
  """
  def get_context do
    GenServer.call(__MODULE__, :get_context)
  end

  # GenServer callbacks

  def init(state) do
    # Trigger an immediate poll so data is available right away.
    schedule_poll(0)
    {:ok, state}
  end

  def handle_info(:poll, state) do
    with {:ok, current_data} <- fetch_current_market_data(),
         {:ok, historical_data} <- fetch_all_historical_data() do
      timestamp = System.system_time(:millisecond)

      new_state = %{
        state
        | current: current_data,
          historical: historical_data,
          last_updated: timestamp
      }

      # Rapid movement alerts
      if state.current && new_state.current do
        old_price = state.current["quote"]["USD"]["price"]
        new_price = new_state.current["quote"]["USD"]["price"]
        change = (new_price - old_price) / old_price * 100.0

        if abs(change) >= 1.0 do
          alert_msg = "market alert: bitcoin price changed by #{Float.round(change, 2)}%!"
          _ = CoinTalk.Chat.create_message(%{sender: "system", content: alert_msg})
        end
      end

      schedule_poll()
      {:noreply, new_state}
    else
      error ->
        IO.puts("MarketData fetch error: #{inspect(error)}")
        schedule_poll()
        {:noreply, state}
    end
  end

  def handle_call(:get_current, _from, state) do
    {:reply, state.current, state}
  end

  def handle_call(:get_historical, _from, state) do
    {:reply, state.historical, state}
  end

  def handle_call(:get_context, _from, state) do
    current_price =
      if state.current do
        state.current["quote"]["USD"]["price"] |> Float.round(2)
      else
        "N/A"
      end

    historical = state.historical || %{}

    context = """
    Current Price: $#{current_price}
    Historical Data:
      Yesterday: $#{historical.yesterday || "N/A"}
      1 Week Ago: $#{historical.week || "N/A"}
      1 Month Ago: $#{historical.month || "N/A"}
      1 Year Ago: $#{historical.year || "N/A"}
    """

    {:reply, context, state}
  end

  # Helper functions

  defp schedule_poll(delay \\ @poll_interval) do
    Process.send_after(self(), :poll, delay)
  end

  # Fetch the current BTC market data using the "quotes/latest" endpoint.
  defp fetch_current_market_data do
    api_key = Application.fetch_env!(:coin_talk, CoinTalk.MarketData)[:coinmarketcap_api_key]
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    params = [symbol: "BTC", convert: "USD"]

    headers = [
      {"X-CMC_PRO_API_KEY", api_key},
      {"Accept", "application/json"}
    ]

    case Req.get(url, params: params, headers: headers) do
      {:ok, %Req.Response{status: 200, body: body}} ->
        btc_data = body["data"]["BTC"]
        {:ok, btc_data}

      {:ok, %Req.Response{status: status, body: body}} ->
        {:error, "Current request failed: #{status} - #{inspect(body)}"}

      {:error, reason} ->
        {:error, "HTTP error: #{inspect(reason)}"}
    end
  end

  # Fetch historical data for key dates, using fallback dummy values if needed.
  defp fetch_all_historical_data do
    today = Date.utc_today()

    dates = %{
      yesterday: Date.add(today, -1),
      week: Date.add(today, -7),
      month: Date.add(today, -30),
      year: Date.add(today, -365)
    }

    with {:ok, price_yesterday} <- fetch_historical_data_or_dummy(dates.yesterday, 97_499.63),
         {:ok, price_week} <- fetch_historical_data_or_dummy(dates.week, 96_650.00),
         {:ok, price_month} <- fetch_historical_data_or_dummy(dates.month, 100_700.00),
         {:ok, price_year} <- fetch_historical_data_or_dummy(dates.year, 51_800.00) do
      {:ok, %{yesterday: price_yesterday, week: price_week, month: price_month, year: price_year}}
    else
      _ ->
        # In case of any unexpected error, return the dummy data.
        {:ok, %{yesterday: 97_499.63, week: 96_650.00, month: 100_700.00, year: 51_800.00}}
    end
  end

  # Attempt to fetch the historical price for a given date, falling back to dummy data on error.
  defp fetch_historical_data_or_dummy(date, fallback) do
    case fetch_historical_price(date) do
      {:ok, price} ->
        {:ok, price}

      {:error, reason} ->
        IO.puts(
          "Historical data error for #{Date.to_iso8601(date)}: #{inspect(reason)}. Using fallback value."
        )

        {:ok, fallback}
    end
  end

  # Given a Date, fetch BTC’s historical quote for that day using the quotes/historical endpoint.
  defp fetch_historical_price(date) do
    iso_date = Date.to_iso8601(date)
    api_key = Application.fetch_env!(:coin_talk, CoinTalk.MarketData)[:coinmarketcap_api_key]
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/historical"
    params = [symbol: "BTC", date: iso_date, convert: "USD"]

    headers = [
      {"X-CMC_PRO_API_KEY", api_key},
      {"Accept", "application/json"}
    ]

    case Req.get(url, params: params, headers: headers) do
      {:ok, %Req.Response{status: 200, body: body}} ->
        quotes = get_in(body, ["data", "BTC", "quotes"])

        case quotes do
          [first | _] ->
            price = first["quote"]["USD"]["price"] |> Float.round(2)
            {:ok, price}

          _ ->
            {:error, "No quotes found for #{iso_date}"}
        end

      {:ok, %Req.Response{status: status, body: body}} ->
        {:error, "Historical request failed: #{status} - #{inspect(body)}"}

      {:error, reason} ->
        {:error, "HTTP error: #{inspect(reason)}"}
    end
  end
end

=== File: lib/coin_talk/repo.ex ===

defmodule CoinTalk.Repo do
  use Ecto.Repo,
    otp_app: :coin_talk,
    adapter: Ecto.Adapters.Postgres
end

=== File: lib/coin_talk.ex ===

defmodule CoinTalk do
  @moduledoc """
  CoinTalk keeps the contexts that define your domain
  and business logic.

  Contexts are also responsible for managing your data, regardless
  if it comes from the database, an external API or others.
  """
end

=== File: lib/coin_talk_web/controllers/api/chart_controller.ex ===

defmodule CoinTalkWeb.Api.ChartController do
  @moduledoc """
  A JSON API for returning current BTC market data and historical data.
  """
  use CoinTalkWeb, :controller

  def index(conn, _params) do
    # Get the current market data.
    current = CoinTalk.MarketData.get_current_price()

    price =
      if current do
        current["quote"]["USD"]["price"] |> Float.round(2)
      else
        "N/A"
      end

    # Get historical market data (yesterday, 1 week, 1 month, 1 year).
    historical = CoinTalk.MarketData.get_historical_data()

    data = %{
      bitcoin: %{
        price: price,
        historical: historical
      }
    }

    json(conn, data)
  end
end

=== File: lib/coin_talk_web/controllers/api/chat_controller.ex ===

defmodule CoinTalkWeb.Api.ChatController do
  @moduledoc """
  A JSON API for retrieving and creating chat messages.
  """
  use CoinTalkWeb, :controller

  alias CoinTalk.Chat

  @doc """
  Lists recent chat messages.
  """
  def index(conn, _params) do
    messages = Chat.list_messages()
    json(conn, %{messages: messages})
  end

  @doc """
  Creates a new chat message.

  Expects a JSON payload with at least “sender” and “content” keys.
  """
  def create(conn, %{"sender" => _sender, "content" => _content} = params) do
    case Chat.handle_user_message(params) do
      {:ok, message} ->
        json(conn, %{message: message})

      {:error, changeset} ->
        conn
        |> put_status(:unprocessable_entity)
        |> json(%{errors: traverse_errors(changeset)})
    end
  end

  defp traverse_errors(changeset) do
    Ecto.Changeset.traverse_errors(changeset, fn {msg, _opts} -> msg end)
  end
end

=== File: lib/coin_talk_web/controllers/api/options_controller.ex ===

defmodule CoinTalkWeb.Api.OptionsController do
  use CoinTalkWeb, :controller

  def options(conn, _params) do
    # Return a 204 No Content response.
    send_resp(conn, 204, "")
  end
end

=== File: lib/coin_talk_web/controllers/bot_chat_controller.ex ===

defmodule CoinTalkWeb.BotChatController do
  use CoinTalkWeb, :controller

  alias CoinTalk.Chat

  def index(conn, _params) do
    messages = Chat.list_messages(50)

    IO.puts("\n=== Bot Chat Conversation ===")

    Enum.each(messages, fn msg ->
      IO.puts("[#{NaiveDateTime.to_string(msg.inserted_at)}] #{msg.sender}: #{msg.content}")
    end)

    IO.puts("=== End of Conversation ===\n")

    send_resp(conn, 200, "Bot conversation has been logged to the console.\n")
  end
end

=== File: lib/coin_talk_web/controllers/default_controller.ex ===

# lib/coin_talk_web/controllers/default_controller.ex
defmodule CoinTalkWeb.DefaultController do
  use CoinTalkWeb, :controller

  def index(conn, _params) do
    json(conn, %{
      message: "Welcome to Coin Talk",
      version: "1.0"
    })
  end
end

=== File: lib/coin_talk_web/endpoint.ex ===

defmodule CoinTalkWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :coin_talk

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_coin_talk_key",
    signing_salt: "AaW+KOxB",
    same_site: "Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # You should set gzip to true if you are running phx.digest
  # when deploying your static files in production.
  plug Plug.Static,
    at: "/",
    from: :coin_talk,
    gzip: false,
    only: CoinTalkWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
    plug Phoenix.LiveReloader
    plug Phoenix.CodeReloader
    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :coin_talk
  end

  plug Phoenix.LiveDashboard.RequestLogger,
    param_key: "request_logger",
    cookie_key: "request_logger"

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options
  plug CoinTalkWeb.Router
end

=== File: lib/coin_talk_web/gettext.ex ===

defmodule CoinTalkWeb.Gettext do
  @moduledoc """
  A module providing Internationalization with a gettext-based API.

  By using [Gettext](https://hexdocs.pm/gettext),
  your module gains a set of macros for translations, for example:

      import CoinTalkWeb.Gettext

      # Simple translation
      gettext("Here is the string to translate")

      # Plural translation
      ngettext("Here is the string to translate",
               "Here are the strings to translate",
               3)

      # Domain-based translation
      dgettext("errors", "Here is the error message to translate")

  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
  """
  use Gettext.Backend, otp_app: :coin_talk
end

=== File: lib/coin_talk_web/plugs/rate_limiter.ex ===

defmodule CoinTalkWeb.Plugs.RateLimiter do
  @moduledoc """
  A simple ETS–based rate limiter plug.

  For each incoming API request the plug will inspect the caller’s IP address
  (as determined from `conn.remote_ip`) and allow at most @limit requests per @interval.
  If the rate is exceeded a 429 status is returned.
  """

  import Plug.Conn
  require Logger

  # maximum requests allowed per interval
  @limit 60
  # interval in milliseconds (60 seconds)
  @interval 60_000

  def init(opts), do: opts

  def call(conn, _opts) do
    Logger.debug(
      "RateLimiter plug: received #{conn.method} request with headers: #{inspect(conn.req_headers)}"
    )

    if conn.method == "OPTIONS" do
      conn
    else
      ensure_table_exists()
      ip = ip_to_string(conn.remote_ip)
      now = System.system_time(:millisecond)
      Logger.debug("Checking rate for IP #{ip} at time #{now}")

      case check_rate(ip, now) do
        :ok ->
          Logger.debug("Rate check OK for #{ip}")
          conn

        :error ->
          Logger.debug("Rate limit exceeded for #{ip}")

          conn
          |> send_resp(429, "Rate limit exceeded")
          |> halt()
      end
    end
  end

  defp ip_to_string(remote_ip) when is_tuple(remote_ip) do
    remote_ip
    |> Tuple.to_list()
    |> Enum.join(".")
  end

  defp ensure_table_exists do
    table = :rate_limiter_table

    if :ets.whereis(table) == :undefined do
      try do
        :ets.new(table, [:named_table, :public, read_concurrency: true])
      rescue
        ArgumentError -> :ok
      end
    else
      :ok
    end
  end

  defp check_rate(ip, now) do
    table = :rate_limiter_table

    case :ets.lookup(table, ip) do
      [] ->
        :ets.insert(table, {ip, 1, now})
        :ok

      [{^ip, count, timestamp}] ->
        if now - timestamp < @interval do
          if count < @limit do
            :ets.insert(table, {ip, count + 1, timestamp})
            :ok
          else
            :error
          end
        else
          # Reset the counter if the interval has passed.
          :ets.insert(table, {ip, 1, now})
          :ok
        end
    end
  end
end

=== File: lib/coin_talk_web/router.ex ===

defmodule CoinTalkWeb.Router do
  use CoinTalkWeb, :router

  pipeline :browser do
    plug :accepts, ["html"]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, html: {CoinTalkWeb.Layouts, :root}
    plug :protect_from_forgery
    plug :put_secure_browser_headers
  end

  pipeline :api do
    plug CORSPlug, origin: ["http://localhost:5173"]
    plug :accepts, ["json"]
    plug CoinTalkWeb.Plugs.RateLimiter
  end

  scope "/", CoinTalkWeb do
    pipe_through :browser

    get "/", DefaultController, :index

    # New route for viewing the bot conversation
    get "/botchat", BotChatController, :index
  end

  # API endpoints for chart data and chat messages.
  scope "/api", CoinTalkWeb.Api, as: :api do
    pipe_through :api

    # Catch-all OPTIONS route for preflight requests.
    options "/*path", OptionsController, :options

    get "/charts", ChartController, :index
    resources "/chat", ChatController, only: [:index, :create]
  end

  # Enable LiveDashboard and Swoosh mailbox preview in development
  if Application.compile_env(:coin_talk, :dev_routes) do
    import Phoenix.LiveDashboard.Router

    scope "/dev" do
      pipe_through :browser

      live_dashboard "/dashboard", metrics: CoinTalkWeb.Telemetry
      forward "/mailbox", Plug.Swoosh.MailboxPreview
    end
  end
end

=== File: lib/coin_talk_web/telemetry.ex ===

defmodule CoinTalkWeb.Telemetry do
  use Supervisor
  import Telemetry.Metrics

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  @impl true
  def init(_arg) do
    children = [
      # Telemetry poller will execute the given period measurements
      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
      # Add reporters as children of your supervision tree.
      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end

  def metrics do
    [
      # Phoenix Metrics
      summary("phoenix.endpoint.start.system_time",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.endpoint.stop.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.start.system_time",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.exception.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.stop.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.socket_connected.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_joined.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_handled_in.duration",
        tags: [:event],
        unit: {:native, :millisecond}
      ),

      # Database Metrics
      summary("coin_talk.repo.query.total_time",
        unit: {:native, :millisecond},
        description: "The sum of the other measurements"
      ),
      summary("coin_talk.repo.query.decode_time",
        unit: {:native, :millisecond},
        description: "The time spent decoding the data received from the database"
      ),
      summary("coin_talk.repo.query.query_time",
        unit: {:native, :millisecond},
        description: "The time spent executing the query"
      ),
      summary("coin_talk.repo.query.queue_time",
        unit: {:native, :millisecond},
        description: "The time spent waiting for a database connection"
      ),
      summary("coin_talk.repo.query.idle_time",
        unit: {:native, :millisecond},
        description:
          "The time the connection spent waiting before being checked out for the query"
      ),

      # VM Metrics
      summary("vm.memory.total", unit: {:byte, :kilobyte}),
      summary("vm.total_run_queue_lengths.total"),
      summary("vm.total_run_queue_lengths.cpu"),
      summary("vm.total_run_queue_lengths.io")
    ]
  end

  defp periodic_measurements do
    [
      # A module, function and arguments to be invoked periodically.
      # This function must call :telemetry.execute/3 and a metric must be added above.
      # {CoinTalkWeb, :count_users, []}
    ]
  end
end

=== File: lib/coin_talk_web.ex ===

defmodule CoinTalkWeb do
  @moduledoc """
  The entrypoint for defining your web interface, such
  as controllers, components, channels, and so on.

  This can be used in your application as:

      use CoinTalkWeb, :controller
      use CoinTalkWeb, :html

  The definitions below will be executed for every controller,
  component, etc, so keep them short and clean, focused
  on imports, uses and aliases.

  Do NOT define functions inside the quoted expressions
  below. Instead, define additional modules and import
  those modules here.
  """

  def static_paths, do: ~w(assets fonts images favicon.ico robots.txt)

  def router do
    quote do
      use Phoenix.Router, helpers: false

      # Import common connection and controller functions to use in pipelines
      import Plug.Conn
      import Phoenix.Controller
      import Phoenix.LiveView.Router
    end
  end

  def channel do
    quote do
      use Phoenix.Channel
    end
  end

  def controller do
    quote do
      use Phoenix.Controller,
        formats: [:html, :json],
        layouts: [html: CoinTalkWeb.Layouts]

      import Plug.Conn
      import CoinTalkWeb.Gettext

      unquote(verified_routes())
    end
  end

  def live_view do
    quote do
      use Phoenix.LiveView,
        layout: {CoinTalkWeb.Layouts, :app}

      unquote(html_helpers())
    end
  end

  def live_component do
    quote do
      use Phoenix.LiveComponent

      unquote(html_helpers())
    end
  end

  def html do
    quote do
      use Phoenix.Component

      # Import convenience functions from controllers
      import Phoenix.Controller,
        only: [get_csrf_token: 0, view_module: 1, view_template: 1]

      # Include general helpers for rendering HTML
      unquote(html_helpers())
    end
  end

  defp html_helpers do
    quote do
      # HTML escaping functionality
      import Phoenix.HTML
      # Core UI components and translation
      import CoinTalkWeb.CoreComponents
      import CoinTalkWeb.Gettext

      # Shortcut for generating JS commands
      alias Phoenix.LiveView.JS

      # Routes generation with the ~p sigil
      unquote(verified_routes())
    end
  end

  def verified_routes do
    quote do
      use Phoenix.VerifiedRoutes,
        endpoint: CoinTalkWeb.Endpoint,
        router: CoinTalkWeb.Router,
        statics: CoinTalkWeb.static_paths()
    end
  end

  @doc """
  When used, dispatch to the appropriate controller/live_view/etc.
  """
  defmacro __using__(which) when is_atom(which) do
    apply(__MODULE__, which, [])
  end
end

=== File: lib/gemini_client.ex ===

defmodule CoinTalk.GeminiClient do
  @moduledoc """
  Client for interacting with Google's Gemini API.
  """

  @api_url "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"

  def generate_content(prompt) do
    # Simulate network/API variability with a short random delay.
    :timer.sleep(:rand.uniform(500))
    case System.get_env("GEMINI_API_KEY") do
      nil ->
        {:error, "Missing GEMINI_API_KEY environment variable"}

      api_key ->
        body = %{
          "contents" => [%{"parts" => [%{"text" => prompt}]}]
        }

        headers = [{"Content-Type", "application/json"}]

        case Req.post(@api_url <> "?key=" <> api_key, json: body, headers: headers) do
          {:ok,
           %Req.Response{
             status: 200,
             body: %{"candidates" => [%{"content" => %{"parts" => [%{"text" => response}]}}]}
           }} ->
            {:ok, response}

          {:ok, %Req.Response{status: status, body: body}} ->
            {:error, "Request failed: #{status}, #{inspect(body)}"}

          {:error, reason} ->
            {:error, "Request error: #{inspect(reason)}"}
        end
    end
  end
end

=== File: mix.exs ===

defmodule CoinTalk.MixProject do
  use Mix.Project

  def project do
    [
      app: :coin_talk,
      version: "0.1.0",
      elixir: "~> 1.14",
      elixirc_paths: elixirc_paths(Mix.env()),
      start_permanent: Mix.env() == :prod,
      aliases: aliases(),
      deps: deps()
    ]
  end

  # Configuration for the OTP application.
  #
  # Type `mix help compile.app` for more information.
  def application do
    [
      mod: {CoinTalk.Application, []},
      extra_applications: [:logger, :runtime_tools]
    ]
  end

  # Specifies which paths to compile per environment.
  defp elixirc_paths(:test), do: ["lib", "test/support"]
  defp elixirc_paths(_), do: ["lib"]

  # Specifies your project dependencies.
  #
  # Type `mix help deps` for examples and options.
  defp deps do
    [
      {:phoenix, "~> 1.7.14"},
      {:phoenix_ecto, "~> 4.5"},
      {:ecto_sql, "~> 3.10"},
      {:postgrex, ">= 0.0.0"},
      {:phoenix_html, "~> 4.1"},
      {:phoenix_live_reload, "~> 1.2", only: :dev},
      {:phoenix_live_view, "~> 1.0.0-rc.1", override: true},
      {:phoenix_live_dashboard, "~> 0.8.3"},
      {:swoosh, "~> 1.5"},
      {:finch, "~> 0.13"},
      {:telemetry_metrics, "~> 1.0"},
      {:telemetry_poller, "~> 1.0"},
      {:gettext, "~> 0.20"},
      {:jason, "~> 1.2"},
      {:dns_cluster, "~> 0.1.1"},
      {:bandit, "~> 1.5"},
      {:req, "~> 0.5.8"},
      {:dotenv_parser, "~> 2.0"},
      {:cors_plug, "~> 3.0"}
    ]
  end

  # Aliases are shortcuts or tasks specific to the current project.
  # For example, to install project dependencies and perform other setup tasks, run:
  #
  #     $ mix setup
  #
  # See the documentation for `Mix` for more info on aliases.
  defp aliases do
    [
      setup: ["deps.get", "ecto.setup"],
      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
      "ecto.reset": ["ecto.drop", "ecto.setup"],
      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
    ]
  end
end

=== File: priv/repo/migrations/20250210233227_create_chat_messages.exs ===

defmodule CoinTalk.Repo.Migrations.CreateChatMessages do
  use Ecto.Migration

  def change do
    create table(:chat_messages) do
      add :sender, :string, null: false
      add :content, :text, null: false

      timestamps()
    end
  end
end

=== File: priv/repo/seeds.exs ===

# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# Inside the script, you can read and write to any of your
# repositories directly:
#
#     CoinTalk.Repo.insert!(%CoinTalk.SomeSchema{})
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

# Wipe out all existing chat messages.
IO.puts("Wiping existing chat messages...")
CoinTalk.Repo.delete_all(CoinTalk.Chat.Message)

# Insert an initial context prompt to kick off the conversation.
IO.puts("Seeding initial chat prompt...")

CoinTalk.Chat.create_message(%{
  sender: "system",
  content:
    "welcome to coin talk! start chatting about bitcoin and usd now. use all lowercase and keep the response shorter than two sentences. be friendly!"
})
